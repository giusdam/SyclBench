# syclbench compile time benchmarking experiment script

# uses compiletime_gen to generate various programs and measures their compile time

# NOTES:
# - cmake needs to be setup for the "compiletime" target with the SYCL implementation you intend to test
# - needs to use ninja as the build backend (currently)
# - needs a "time" command line tool which produces standard GNU time format output (otherwise, adapt build_and_get_result)
# - REPEATS defines the number of measurements per data point
# - MAX_POW defines the maximum for the kernel_num, buffer_num and capture_num runs (max = 2^MAX_POW)
# - BASELINE_K defines the base number of kernels used for other runs
# - MIX_NUM defines the basic number of instructions per class for the -mix parameter test


REPEATS = 10
MAX_POW = 11

BASELINE_K = 100
MIX_NUM = 25

## Check directory requirements ------------------------------------

if File.exists?("compiletime.cpp") || (File.exists?("compiletime") && File.exists?("runtime") && File.exists?("micro"))
        puts "You probably don't want to run experiment.rb in the source path."
        puts 'Create a path for your experiment and run "ruby path/to/sycl-bench/compiletime/experiment.rb" from there.'
        exit -1
end

if !File.exists?("#{__dir__}/../build")
        puts 'This script expects a sycl-bench/build directory (generated by cmake) in which it can run "ninja compiletime".'
        exit -1
end

## Helper function ------------------------------------

def build_and_get_result
        Dir.chdir("#{__dir__}/../build") do
                `ninja clean`
                res = `time ninja compiletime 2>&1`
                if res =~ /non-zero status/
                        puts "!!!! ERROR!"
                        puts "-----------"
                        puts res
                        puts "-----------"
                        return -1
                end
                if res =~ /(\d+\.\d+)user (\d+\.\d+)system/
                        return ($1.to_f + $1.to_f)
                else
                        puts "!!!! Couldn't parse!"
                        puts "-----------"
                        puts res
                        puts "-----------"
                        return -2
                end
        end
end

## Experiments varying single parameter ------------------------------------

SINGLE_PARAM_EXPERIMENTS = [
        ["kernel_num", "-k", MAX_POW.times.to_a.map { |n| 2**n }],
        ["buffer_num", "-b", MAX_POW.times.to_a.map { |n| 2**n }],
        ["capture_num", "-c", MAX_POW.times.to_a.map { |n| 2**n }],
        ["dimensions", "-k #{BASELINE_K} -d", [1,2,3]],
        ["loopnests", "-k #{BASELINE_K} -l", [1,2,3,4,5,6]],
        ["type", "-k #{BASELINE_K} -t", %i[int float double]],
        ["mix", "-k #{BASELINE_K/2} -m", ["add:#{MIX_NUM*4}", "mad:#{MIX_NUM*4}", "cos:#{MIX_NUM*4}", "sqrt:#{MIX_NUM*4}", "mad:#{MIX_NUM*2},cos:#{MIX_NUM*2}", "add:#{MIX_NUM},mad:#{MIX_NUM},cos:#{MIX_NUM},sqrt:#{MIX_NUM}"]],
]

ENV['C_INCLUDE_PATH'] = "#{Dir.pwd}:"
ENV['CPLUS_INCLUDE_PATH'] = "#{Dir.pwd}:"

SINGLE_PARAM_EXPERIMENTS.each do |exp_name, exp_arg, exp_values|
        printf "Running #{exp_name} experiment"
        results = Hash.new { |h,k| h[k] = [] }

        REPEATS.times do
                exp_values.each do |val|
                        `ruby #{__dir__}/compiletime_gen.rb #{exp_arg} #{val}`
                        results[val] << build_and_get_result()
                        printf "."
                        File.write("#{exp_name}.results", results.inspect) # write results as soon as available
                end
        end
        puts
end
